{"version":3,"sources":["forms/signIn.form.jsx","components/auth/email.signIn.tsx","components/auth/google.signIn.tsx","components/signInCard.tsx","components/signUp/creating.signUp.tsx"],"names":["SignInForm","handleSubmit","e","preventDefault","props","form","signIn","validateFields","err","values","email","password","this","inProgress","getFieldDecorator","getFieldError","isFieldTouched","onSubmit","className","id","Item","rules","required","message","type","prefix","style","color","placeholder","autoComplete","autoCapitalize","autoCorrect","htmlType","icon","disabled","href","React","Component","connect","state","auth","create","name","dispatch","signInWithEmailAction","token","signInWithGoogleAction","startSignInProcess","SIGN_IN_INITIATED","signInFailed","SIGNING_IN_FAILED","clientId","GOOGLE_OAUTH_CLIENT_ID","render","renderProps","onClick","width","backgroundColor","size","buttonText","onSuccess","response","googleId","tokenId","onFailure","cookiePolicy","Title","isAuthenticated","user","to","COMPANY_PORTAL_HOME_PATH","STUDENT_PORTAL_HOME_PATH","HOME_PATH","textAlign","SIGN_UP_PATH","withRouter","signInUser","account","data","action","startAgain","useState","status","setStatus","useEffect","a","signUpStudentAPI","signUpSuccessfullNotification","signUpFailedNotification","detail","save","height","tip","spinner"],"mappings":"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","file":"static/js/11.498e5db9.chunk.js","sourcesContent":["import React from 'react';\nimport {Form, Icon, Input, Button} from 'antd';\nimport {connect} from 'react-redux';\n\nclass SignInForm extends React.Component {\n  handleSubmit = e => {\n    e.preventDefault();\n    // eslint-disable-next-line react/prop-types\n    const {form, signIn} = this.props;\n    // eslint-disable-next-line react/prop-types\n    const {validateFields} = form;\n    validateFields((err, values) => {\n      if (!err) {\n        signIn(values.email, values.password);\n      }\n    });\n  };\n\n  render() {\n    // eslint-disable-next-line react/prop-types\n    const {form, inProgress} = this.props;\n    // eslint-disable-next-line react/prop-types\n    const {getFieldDecorator, getFieldError, isFieldTouched} = form;\n\n    return (\n      <Form onSubmit={this.handleSubmit} className='login-form' id='sign-in-form'>\n        <Form.Item>\n          {getFieldDecorator('email', {\n            rules: [\n              {required: true, message: 'Please input your email!'},\n              {type: 'email', message: 'Enter a valid email!'},\n            ],\n          })(\n            <Input\n              prefix={<Icon type='user' style={{color: 'rgba(0,0,0,.25)'}} />}\n              placeholder='Email'\n              type='email'\n              autoComplete='username email'\n              autoCapitalize='none'\n              autoCorrect='off'\n            />,\n          )}\n        </Form.Item>\n        <Form.Item>\n          {getFieldDecorator('password', {\n            rules: [{required: true, message: 'Please input your Password!'}],\n          })(\n            <Input\n              prefix={<Icon type='lock' style={{color: 'rgba(0,0,0,.25)'}} />}\n              type='password'\n              placeholder='Password'\n              autoComplete='password'\n            />,\n          )}\n        </Form.Item>\n        <Form.Item>\n          <Button\n            htmlType='submit'\n            className='login-form-button'\n            icon={inProgress ? 'loading' : 'login'}\n            disabled={\n              inProgress ||\n              !isFieldTouched('email') ||\n              getFieldError('email') ||\n              !isFieldTouched('password') ||\n              getFieldError('password')\n            }>\n            Sign In\n          </Button>\n          <a className='login-form-forgot' href='#!'>\n            Forgot password\n          </a>\n        </Form.Item>\n      </Form>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  inProgress: state.auth.inProgress,\n});\n\nexport default connect(mapStateToProps)(Form.create({name: 'sign-in'})(SignInForm));\n","import React, {FC} from 'react';\nimport {connect} from 'react-redux';\n\nimport SignInForm from '../../forms/signIn.form';\nimport {signInWithEmailAction} from '../../actions/auth.action';\n\ninterface IStateProps {}\n\ninterface IDispatchProps {\n  signIn(email: string, password: string): any;\n}\n\ninterface IProps extends IStateProps, IDispatchProps {}\n\nconst EmailSignIn: FC<IProps> = (props: IProps) => {\n  return (\n    // @ts-ignore\n    <SignInForm\n      signIn={(email: string, password: string) => {\n        props.signIn(email, password);\n      }}\n    />\n  );\n};\n\n// eslint-disable-next-line no-unused-vars\nconst mapStateToProps = (state: any): IStateProps => ({});\n\nconst mapDispatchToProps = (dispatch: any): IDispatchProps => ({\n  signIn: (email, password) => dispatch(signInWithEmailAction(email, password)),\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n  // @ts-ignore\n)(EmailSignIn);\n","import React, {FC} from 'react';\nimport {connect} from 'react-redux';\nimport {Button} from 'antd';\nimport {GoogleLogin} from 'react-google-login';\n\nimport {GOOGLE_OAUTH_CLIENT_ID} from '../../constants/credentials.constant';\nimport {IReduxState} from '../../reducers';\nimport {signInWithGoogleAction} from '../../actions/auth.action';\nimport {IAuthState} from '../../reducers/auth.reducer';\nimport {IGoogleSignInResponseHacked} from '../../types/api.type';\nimport {SIGN_IN_INITIATED, SIGNING_IN_FAILED} from '../../actions';\n\n// eslint-disable-next-line no-undef\ninterface IStateProps extends Partial<IAuthState> {\n  inProgress: boolean;\n}\n\ninterface IDispatchProps {\n  signIn(id: string, token: string): any;\n  startSignInProcess(): any;\n  signInFailed(): any;\n}\n\ninterface IProps extends IStateProps, IDispatchProps {}\n\nconst GoogleSignIn: FC<IProps> = (props: IProps) => {\n  const {inProgress} = props;\n\n  return (\n    <GoogleLogin\n      clientId={GOOGLE_OAUTH_CLIENT_ID || ''}\n      render={renderProps => (\n        <Button\n          onClick={() => {\n            props.startSignInProcess();\n            renderProps.onClick();\n          }}\n          disabled={renderProps.disabled}\n          type='primary'\n          icon={inProgress ? 'loading' : 'google'}\n          style={{width: '100%', backgroundColor: '#000000'}}\n          size='large'\n        >\n          Sign In With Google\n        </Button>\n      )}\n      buttonText='Login'\n      // @ts-ignore\n      onSuccess={(response: IGoogleSignInResponseHacked) => {\n        props.signIn(response.googleId, response.tokenId);\n      }}\n      onFailure={() => {\n        props.signInFailed();\n      }}\n      cookiePolicy='single_host_origin'\n    />\n  );\n};\n\nconst mapStateToProps = (state: IReduxState): IStateProps => ({\n  inProgress: state.auth.inProgress,\n});\n\nconst mapDispatchToProps = (dispatch: any): IDispatchProps => ({\n  signIn: (id, token) => dispatch(signInWithGoogleAction(id, token)),\n  startSignInProcess: () => dispatch({type: SIGN_IN_INITIATED}),\n  signInFailed: () => dispatch({type: SIGNING_IN_FAILED}),\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(GoogleSignIn);\n","import React, {FC} from 'react';\nimport {Button, Typography} from 'antd';\nimport {Link, Redirect} from 'react-router-dom';\nimport {connect} from 'react-redux';\n\nimport EmailSignIn from './auth/email.signIn';\nimport GoogleSignIn from './auth/google.signIn';\nimport {\n  COMPANY_PORTAL_HOME_PATH,\n  HOME_PATH,\n  SIGN_UP_PATH,\n  STUDENT_PORTAL_HOME_PATH,\n} from '../constants/paths.constant';\nimport {IReduxState} from '../reducers';\nimport {IUserMeta} from '../types/api.type';\n\ninterface IStateProps {\n  isAuthenticated: boolean;\n  user: IUserMeta | undefined;\n}\n\ninterface IDispatchProps {}\n\ninterface IProps extends IStateProps, IDispatchProps {}\n\nconst {Title} = Typography;\n\nconst SignInCard: FC<IProps> = ({isAuthenticated, user}: IProps) => {\n  if (isAuthenticated && user) {\n    switch (user.type) {\n      case 'C':\n        return <Redirect to={COMPANY_PORTAL_HOME_PATH} />;\n      case 'S':\n        return <Redirect to={STUDENT_PORTAL_HOME_PATH} />;\n      default:\n        return <Redirect to={HOME_PATH} />;\n    }\n  }\n\n  return (\n    <div>\n      <Title>Sign In</Title>\n      <GoogleSignIn />\n      <br />\n      <br />\n      <div style={{textAlign: 'center'}}>OR</div>\n      <br />\n      <EmailSignIn />\n      <br />\n      <Link to={SIGN_UP_PATH}>\n        <Button type='dashed' style={{width: '100%'}} icon='user-add' size='large'>\n          Create New Account\n        </Button>\n      </Link>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: IReduxState): IStateProps => ({\n  isAuthenticated: state.auth.isAuthenticated,\n  user: state.auth.user,\n});\n\nexport default connect(mapStateToProps)(SignInCard);\n","import React, {FC, useEffect, useState} from 'react';\nimport {Spin, Button} from 'antd';\nimport {withRouter} from 'react-router-dom';\nimport {connect} from 'react-redux';\n\nimport {ISignUpData} from '../../types/signUp.type';\nimport {signUpStudentAPI} from '../../helpers/api/api.helper';\nimport {\n  signUpFailedNotification,\n  signUpSuccessfullNotification,\n} from '../../helpers/notification.helper';\nimport {signIn} from '../../actions/auth.action';\nimport {IReduxState} from '../../reducers';\nimport SignInCard from '../signInCard';\n\ninterface IStateProps {\n  isAuthenticated: boolean;\n}\n\ninterface IDispatchProps {\n  signInUser(account: any): any;\n}\n\ninterface IProps extends IStateProps, IDispatchProps {\n  action: any;\n  data: ISignUpData;\n  startAgain: any;\n}\n\nconst CreatingSignUp: FC<IProps> = ({\n  data,\n  action,\n  startAgain,\n  signInUser,\n  isAuthenticated,\n}: IProps) => {\n  const [status, setStatus] = useState('progress');\n\n  useEffect(() => {\n    const save = async () => {\n      action(data);\n      try {\n        await signUpStudentAPI(data);\n        signUpSuccessfullNotification();\n\n        setStatus('signing');\n        signInUser(data.account);\n      } catch (e) {\n        signUpFailedNotification(e.data.detail);\n        setStatus('failed');\n      }\n    };\n\n    save();\n  }, [data, action, signInUser]);\n\n  if (isAuthenticated) return <SignInCard />;\n\n  const spinner = (): any => {\n    switch (status) {\n      case 'progress':\n        return <Spin tip='Creating your account' />;\n      case 'signing':\n        return <Spin tip='Signing you in' />;\n      case 'failed':\n        return (\n          <div style={{textAlign: 'center'}}>\n            Failed to create account try again. Make sure all fields are correctly entered.\n            <br />\n            <Button onClick={startAgain} type='danger'>\n              Please Try Again\n            </Button>\n          </div>\n        );\n      default:\n        return 'Unkonw signin up status';\n    }\n  };\n\n  return (\n    <div style={{height: 300}} className='center-hv'>\n      <div>{spinner()}</div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: IReduxState): IStateProps => ({\n  isAuthenticated: state.auth.isAuthenticated,\n});\n\nconst mapDispatchToProps = (dispatch: any): IDispatchProps => ({\n  signInUser: account => dispatch(signIn(account)),\n});\n\nexport default withRouter(\n  // @ts-ignore\n  connect(\n    mapStateToProps,\n    mapDispatchToProps,\n  )(CreatingSignUp),\n);\n"],"sourceRoot":""}
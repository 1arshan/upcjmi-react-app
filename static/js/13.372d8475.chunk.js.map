{"version":3,"sources":["helpers/function.helper.ts","components/googleSignUpButton.tsx","forms/signUp/emailSignUp.form.tsx","components/signUp/account.signUp.tsx"],"names":["get","obj","key","defaultValue","e","connect","state","dispatch","onSignInSuccess","clientId","GOOGLE_OAUTH_CLIENT_ID","render","renderProps","onClick","disabled","type","icon","size","style","width","backgroundColor","buttonText","onSuccess","response","id","googleId","token","tokenId","email","profileObj","name","onFailure","errorGettingUserInfoNotification","cookiePolicy","usernameValidator","rule","value","callback","a","doesUserExistsAPI","exists","EmailSignUpForm","handleSubmit","preventDefault","props","form","onSubmit","validateFields","err","values","this","data","getFieldDecorator","getFieldError","isFieldTouched","className","Item","hasFeedback","initialValue","basic","rules","required","message","validator","validateTrigger","prefix","color","placeholder","autoComplete","autoCapitalize","autoCorrect","min","autocomplete","getFieldValue","htmlType","React","Component","inProgress","auth","create","Title","AccountSignUp","action","next","saveData","signInData","userExistsWithThisEmail","account","SignUpForm","GoogleSignUp","level","textAlign"],"mappings":"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","file":"static/js/13.372d8475.chunk.js","sourcesContent":["export const get = (obj: any, key: any, defaultValue: any = null) => {\n  try {\n    return obj[key];\n  } catch (e) {\n    return defaultValue;\n  }\n};\n\nexport const generalFilter = (input: string, option: any) =>\n  option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0;\n","import React, {FC} from 'react';\nimport {connect} from 'react-redux';\nimport {GoogleLogin} from 'react-google-login';\nimport {Button} from 'antd';\nimport {GOOGLE_OAUTH_CLIENT_ID} from '../constants/credentials.constant';\nimport {IGoogleSignInResponseHacked} from '../types/api.type';\nimport {errorGettingUserInfoNotification} from '../helpers/notification.helper';\n\ninterface IStateProps {}\n\ninterface IDispatchProps {}\n\ninterface IProps extends IStateProps, IDispatchProps {\n  onSignInSuccess: any;\n}\n\nconst GoogleSignUpButton: FC<IProps> = ({onSignInSuccess}: IProps) => (\n  <GoogleLogin\n    clientId={GOOGLE_OAUTH_CLIENT_ID || ''}\n    render={renderProps => (\n      <Button\n        onClick={renderProps.onClick}\n        disabled={renderProps.disabled}\n        type='primary'\n        icon='google'\n        size='large'\n        style={{width: '100%', backgroundColor: '#000000'}}>\n        Create Account Using Google\n      </Button>\n    )}\n    buttonText='Sign Up'\n    // @ts-ignore\n    onSuccess={(response: IGoogleSignInResponseHacked) => {\n      onSignInSuccess({\n        id: response.googleId,\n        token: response.tokenId,\n        email: response.profileObj.email,\n        name: response.profileObj.name,\n        type: 'G',\n      });\n    }}\n    onFailure={() => {\n      errorGettingUserInfoNotification();\n    }}\n    cookiePolicy='single_host_origin'\n  />\n);\n\n// eslint-disable-next-line no-unused-vars\nconst mapStateToProps = (state: any): IStateProps => ({});\n\n// eslint-disable-next-line no-unused-vars\nconst mapDispatchToProps = (dispatch: any): IDispatchProps => ({});\n\n// @ts-ignore\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(GoogleSignUpButton);\n","import React from 'react';\nimport {Form, Icon, Input, Button} from 'antd';\nimport {connect} from 'react-redux';\nimport {IReduxState} from '../../reducers';\nimport {doesUserExistsAPI} from '../../helpers/api/api.helper';\nimport {ISignUpData} from '../../types/signUp.type';\nimport {get} from '../../helpers/function.helper';\n\ninterface IStateProps {\n  form: any;\n  signIn: any;\n}\n\ninterface IProps extends IStateProps {\n  onSubmit: any;\n  data: ISignUpData;\n}\n\nconst usernameValidator = async (rule: any, value: string, callback: any) => {\n  const {exists} = await doesUserExistsAPI(value);\n  if (exists) callback(`Email ${value} is associated with another account.`);\n\n  callback();\n};\n\nclass EmailSignUpForm extends React.Component<IProps> {\n  handleSubmit: any = (e: Event) => {\n    e.preventDefault();\n    const {form, onSubmit} = this.props;\n    const {validateFields} = form;\n    validateFields((err: any, values: any) => {\n      if (!err) {\n        // do something\n        onSubmit({\n          ...values,\n          type: 'E',\n        });\n      }\n    });\n  };\n\n  render() {\n    // eslint-disable-next-line react/prop-types\n    const {form, data} = this.props;\n    // eslint-disable-next-line react/prop-types\n    const {getFieldDecorator, getFieldError, isFieldTouched} = form;\n\n    // @ts-ignore\n    return (\n      <Form onSubmit={this.handleSubmit} className='login-form' id='sign-in-form'>\n        <Form.Item hasFeedback>\n          {getFieldDecorator('email', {\n            initialValue: get(data.basic, 'email'),\n            rules: [\n              {required: true, message: 'Please input your email!'},\n              {type: 'email', message: 'Enter a valid email!'},\n              {validator: usernameValidator},\n            ],\n            validateTrigger: 'onBlur',\n          })(\n            // @ts-ignore\n            <Input\n              prefix={<Icon type='user' style={{color: 'rgba(0,0,0,.25)'}} />}\n              placeholder='Email'\n              type='email'\n              autoComplete='username email'\n              autoCapitalize='none'\n              autoCorrect='off'\n            />,\n          )}\n        </Form.Item>\n        <Form.Item hasFeedback>\n          {getFieldDecorator('password', {\n            initialValue: get(data.basic, 'password'),\n            rules: [\n              {required: true, message: 'Please input your Password!'},\n              {min: 8, message: 'Password should be minimum 8 characters.'},\n            ],\n          })(\n            // @ts-ignore\n            <Input\n              prefix={<Icon type='lock' style={{color: 'rgba(0,0,0,.25)'}} />}\n              type='password'\n              placeholder='Password'\n              autocomplete='new-password'\n            />,\n          )}\n        </Form.Item>\n        <Form.Item hasFeedback>\n          {getFieldDecorator('confirm-password', {\n            rules: [\n              {\n                validator: (rule: any, value: string, callback: any) => {\n                  if (value !== form.getFieldValue('password')) callback(true);\n\n                  callback();\n                },\n                message: 'Passwords does not match',\n              },\n            ],\n          })(\n            // @ts-ignore\n            <Input\n              prefix={<Icon type='safety' style={{color: 'rgba(0,0,0,.25)'}} />}\n              type='password'\n              placeholder='Confirm Password'\n              autocomplete='new-password'\n            />,\n          )}\n        </Form.Item>\n        <Form.Item>\n          <Button\n            type='primary'\n            htmlType='submit'\n            className='login-form-button'\n            disabled={\n              !isFieldTouched('email') ||\n              getFieldError('email') ||\n              !isFieldTouched('password') ||\n              getFieldError('password') ||\n              !isFieldTouched('confirm-password') ||\n              getFieldError('confirm-password')\n            }>\n            Next\n          </Button>\n        </Form.Item>\n      </Form>\n    );\n  }\n}\n\nconst mapStateToProps = (state: IReduxState) => ({\n  inProgress: state.auth.inProgress,\n});\n\nexport default connect(mapStateToProps)(Form.create({name: 'sign-in'})(EmailSignUpForm));\n","import React, {FC} from 'react';\nimport {Typography} from 'antd';\nimport GoogleSignUpButton from '../googleSignUpButton';\nimport EmailSignUpForm from '../../forms/signUp/emailSignUp.form';\nimport {doesUserExistsAPI} from '../../helpers/api/api.helper';\nimport {userExistsWithThisEmail} from '../../helpers/notification.helper';\nimport {ISignUpData} from '../../types/signUp.type';\n\ninterface IProps {\n  action: any;\n  next: any;\n  data: ISignUpData;\n}\n\nconst {Title} = Typography;\n\nconst AccountSignUp: FC<IProps> = ({action, data, next}: IProps) => {\n  const saveData = async (signInData: any) => {\n    const {exists} = await doesUserExistsAPI(signInData.email);\n    if (!exists) {\n      action({\n        ...data,\n        basic: {\n          ...data.basic,\n          name: signInData.name,\n        },\n        account: signInData,\n      });\n      next();\n    } else {\n      userExistsWithThisEmail(signInData.email);\n    }\n  };\n\n  // @ts-ignore\n  const SignUpForm = <EmailSignUpForm onSubmit={saveData} data={data} />;\n  // @ts-ignore\n  const GoogleSignUp = <GoogleSignUpButton onSignInSuccess={saveData} />;\n\n  return (\n    <div>\n      <Title level={3}>Account</Title>\n      {GoogleSignUp}\n      <br />\n      <br />\n\n      <div style={{textAlign: 'center'}}>OR</div>\n      <br />\n      {SignUpForm}\n    </div>\n  );\n};\n\nexport default AccountSignUp;\n"],"sourceRoot":""}
{"version":3,"sources":["constants/formFields.constant.ts","helpers/function.helper.ts","components/formCreator.jsx","helpers/api/file.api.helper.ts","forms/signUp/verification.templateForm.tsx","components/signUp/verificationDocument.signUp.tsx"],"names":["FORM_ELEMENT_TYPES","INPUT","INPUT_NUMBER","PASSWORD","TEXTAREA","MARKDOWN","SELECT","CAPTCHA","MONTH_PICKER","FILE_DRAG_DROP","RANGE_PICKER","RADIO","type","name","label","rules","required","process","message","get","obj","key","defaultValue","e","MonthPicker","RangePicker","formItemLayout","labelCol","xs","span","sm","wrapperCol","tailFormItemLayout","offset","blockFormItemLayout","FormCreator","props","handleSubmit","preventDefault","form","onSubmit","validateFields","err","openNotificationWithIcon","state","initialValues","loaded","initialValue","this","then","data","setState","catch","error","getFieldDecorator","setFieldsValue","getFieldValue","onCancel","extraData","submitButtonText","cancelButtonText","buttonType","formLayout","formTemplate","buttonPlacement","map","formItem","index","help","kwargs","desc","fieldOptions","itemInput","extraComponent","changeValue","value","captcha","sitekey","GOOGLE_RECAPTCHA_KEY","onChange","onExpired","onErrored","document","getElementById","innerText","options","Object","keys","forEach","push","Option","toString","children","options1","Group","Password","format","TextArea","Dragger","action","BASE_URL","file","upload_id","uid","onRemove","identifier","response","uploadId","loadOpenUrl","method","files","fileList","className","Item","title","colon","style","marginBottom","extra","preserve","width","onClick","htmlType","Component","WrappedFormCreator","create","connect","dispatch","verificationDocumentTemplate","extraValues","values","multiple","listType","accept","Title","VerificationDocumentSignUp","next","objForm","basic","getFieldsValue","href","TERMS_AND_CONDITION","newLine","PRIVACY_POLICY"],"mappings":"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","file":"static/js/13.820064a2.chunk.js","sourcesContent":["export const FORM_ELEMENT_TYPES = {\n  INPUT: 'input',\n  INPUT_NUMBER: 'input-number',\n  PASSWORD: 'password',\n  TEXTAREA: 'textarea',\n  MARKDOWN: 'markdown',\n  SELECT: 'select',\n  CAPTCHA: 'captcha',\n  MONTH_PICKER: 'month-picker',\n  FILE_DRAG_DROP: 'file-drag-drop',\n  RANGE_PICKER: 'range-picker',\n  RADIO: 'radio',\n};\n\nexport const SUBMIT_FORM = 'SUBMIT_FORM';\n\nexport const CAPTCHA = {\n  type: FORM_ELEMENT_TYPES.CAPTCHA,\n  name: 'captcha',\n  label: 'Captcha',\n  rules: [\n    {\n      required: process.env.NODE_ENV === 'production',\n      message: 'Please solve the captcha',\n    },\n  ],\n};\n","export const get = (obj: any, key: any, defaultValue: any = null) => {\n  try {\n    return obj[key];\n  } catch (e) {\n    return defaultValue;\n  }\n};\n\nexport const generalFilter = (input: string, option: any) =>\n  option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0;\n","/* eslint-disable */\nimport React, {Component} from 'react';\n\nimport {\n  Button,\n  Form,\n  Input,\n  Select,\n  Tooltip,\n  Icon,\n  DatePicker,\n  Upload,\n  Radio,\n  InputNumber,\n  Row,\n  Col\n} from 'antd';\nimport {connect} from 'react-redux';\n\nimport SimpleMDE from 'react-simplemde-editor';\nimport {FORM_ELEMENT_TYPES} from '../constants/formFields.constant';\n\nimport 'easymde/dist/easymde.min.css';\nimport {openNotificationWithIcon} from '../helpers/notification.helper';\nimport ReCAPTCHA from 'react-google-recaptcha';\nimport {GOOGLE_RECAPTCHA_KEY} from '../constants/credentials.constant';\nimport {getFileHandlerURL, removeFileFromServer} from '../helpers/api/file.api.helper';\n\nconst {MonthPicker, RangePicker} = DatePicker;\n\nconst formItemLayout = {\n  labelCol: {\n    xs: {span: 24},\n    sm: {span: 8},\n  },\n  wrapperCol: {\n    xs: {span: 24},\n    sm: {span: 16},\n  },\n};\n\nconst tailFormItemLayout = {\n  wrapperCol: {\n    xs: {\n      span: 24,\n      offset: 0,\n    },\n    sm: {\n      span: 16,\n      offset: 8,\n    },\n  },\n};\n\nconst blockFormItemLayout = {\n  wrapperCol: {\n    xs: {\n      span: 24,\n      offset: 0,\n    },\n    sm: {\n      span: 24,\n      offset: 0\n    }\n  }\n};\n\nclass FormCreator extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      initialValues: {},\n      loaded: false,\n    };\n  }\n\n  handleSubmit = e => {\n    e.preventDefault();\n    const {form, onSubmit} = this.props;\n    const {validateFields} = form;\n\n    validateFields(err => {\n      if (!err) onSubmit(form);\n      else openNotificationWithIcon('error', 'Please Correct the error displayed in forms.');\n    });\n  };\n\n\n  componentDidMount() {\n    const {initialValue} = this.props;\n    if (initialValue)\n      initialValue()\n        .then(data => {\n          this.setState({\n            initialValues: data,\n            loaded: true,\n          });\n        })\n        .catch(error => {\n          console.log(error);\n        });\n  }\n\n  render() {\n    const {getFieldDecorator, setFieldsValue, getFieldValue} = this.props.form;\n    const {\n      onCancel,\n      state,\n      extraData,\n      initialValue,\n      submitButtonText,\n      cancelButtonText,\n      buttonType,\n      formLayout = formItemLayout,\n    } = this.props;\n    let {formTemplate} = this.props;\n    const {loaded} = this.state;\n\n    if (!loaded && initialValue) return 'Loading...';\n\n    if (typeof formTemplate === 'function') {\n      formTemplate = formTemplate(state, this.state.initialValues, extraData, this.props.form);\n    }\n\n    const buttonPlacement = buttonType === 'block'? blockFormItemLayout : tailFormItemLayout;\n\n\n    return (\n      <Form onSubmit={this.handleSubmit} {...formLayout}>\n        {formTemplate.map((formItem, index) => {\n          const {label, name, help, kwargs, type, desc, ...fieldOptions} = formItem;\n          const element = type;\n\n          let itemInput = null;\n          let extraComponent = null;\n\n          switch (element) {\n            case FORM_ELEMENT_TYPES.CAPTCHA:\n              const changeValue = (value = '') =>\n                setFieldsValue({\n                  captcha: value,\n                });\n              extraComponent = (\n                <ReCAPTCHA\n                  sitekey={GOOGLE_RECAPTCHA_KEY}\n                  onChange={changeValue}\n                  onExpired={() => changeValue()}\n                  onErrored={() => changeValue()}\n                />\n              );\n              itemInput = <input type=\"hidden\" value={getFieldValue('captcha')} />;\n              break;\n            case FORM_ELEMENT_TYPES.INPUT:\n              itemInput = <Input {...kwargs} />;\n              break;\n            case FORM_ELEMENT_TYPES.INPUT_NUMBER:\n              itemInput = <InputNumber {...kwargs} />;\n              break;\n            case FORM_ELEMENT_TYPES.MARKDOWN:\n              itemInput = (\n                <SimpleMDE\n                  onChange={value => {\n                    document.getElementById(name).innerText = value;\n                  }}\n                />\n              );\n              break;\n            case FORM_ELEMENT_TYPES.SELECT:\n              const options = [];\n              Object.keys(formItem.options).forEach((key, index) => {\n                options.push(\n                  <Select.Option\n                    key={index.toString()}\n                    value={key}\n                    children={formItem.options[key]}\n                  />,\n                );\n              });\n              itemInput = <Select {...kwargs}>{options}</Select>;\n              break;\n            case FORM_ELEMENT_TYPES.RADIO:\n              const options1 = [];\n              Object.keys(formItem.options).forEach((key, index) => {\n                options1.push(\n                  <Radio key={index.toString()} value={key} children={formItem.options[key]}>\n                    {key}\n                  </Radio>,\n                );\n              });\n              itemInput = <Radio.Group>{options1}</Radio.Group>;\n              break;\n            case FORM_ELEMENT_TYPES.PASSWORD:\n              itemInput = <Input.Password {...kwargs} />;\n              break;\n            case FORM_ELEMENT_TYPES.MONTH_PICKER:\n              itemInput = (\n                <MonthPicker\n                  {...kwargs}\n                  format=\"MM/YYYY\"\n                  // defaultValue={moment(kwargs['value'], kwargs['format'])}\n                />\n              );\n              break;\n            case FORM_ELEMENT_TYPES.RANGE_PICKER:\n              itemInput = (\n                <RangePicker\n                  {...kwargs}\n                  format=\"YYYY-MM-DD\"\n                  // defaultValue={moment(kwargs['value'], kwargs['format'])}\n                />\n              );\n              break;\n            case FORM_ELEMENT_TYPES.TEXTAREA:\n              itemInput = <Input.TextArea {...kwargs} />;\n              break;\n            case FORM_ELEMENT_TYPES.FILE_DRAG_DROP:\n              extraComponent = (\n                <Upload.Dragger\n                  {...kwargs}\n                  action={getFileHandlerURL()}\n                  data={file => ({\n                    upload_id: file.uid,\n                  })}\n                  onRemove={file => removeFileFromServer(file.response.identifier, file.uid)}\n                  onChange={obj => {\n                    const files = [];\n                    obj.fileList.map(file => {\n                      // files[file.uid] = file.response ? file.response.id : '';\n                      files.push({\n                        upload_id: file.uid,\n                        identifier: file.response ? file.response.identifier : '',\n                      });\n                      return '';\n                    });\n                    setFieldsValue({\n                      [name]: files,\n                    });\n                  }}>\n                  <p className=\"ant-upload-drag-icon\">\n                    <Icon type=\"inbox\" />\n                  </p>\n                  <p className=\"ant-upload-text\">{kwargs.help}</p>\n                  <p className=\"ant-upload-hint\">{kwargs.desc}</p>\n                </Upload.Dragger>\n              );\n              fieldOptions.initialValue = '';\n              itemInput = <input type=\"hidden\" value={getFieldValue(name)} />;\n              break;\n            default:\n              itemInput = <Input {...kwargs} />;\n          }\n\n          return (\n            <Form.Item\n              label={\n                <span>\n                  {label}\n                  &nbsp;\n                  {help ? (\n                    <Tooltip title={help}>\n                      <Icon type=\"question-circle-o\" />\n                    </Tooltip>\n                  ) : null}\n                </span>\n              }\n              colon={false}\n              key={index.toString()}\n              style={{\n                marginBottom: 20,\n              }}\n              extra={desc}>\n              {extraComponent}\n              {getFieldDecorator(formItem.name, {\n                preserve: true,\n                ...fieldOptions,\n              })(itemInput)}\n            </Form.Item>\n          );\n        })}\n        <Form.Item {...buttonPlacement}>\n        {onCancel ? (\n          <Button\n            style={{\n              width: buttonType === 'block' ? '100%' : null,\n            }}\n            onClick={() => onCancel(this.props.form)}\n            htmlType=\"button\">\n            {cancelButtonText || 'Cancel'}\n          </Button>\n        ) : null}\n        </Form.Item>\n\n        <Form.Item {...buttonPlacement}>\n        <Button\n            onClick={this.handleSubmit}\n            type=\"primary\"\n            htmlType=\"submit\"\n            style={{\n              width: buttonType === 'block' ? '100%' : null,\n            }}>\n            {submitButtonText || 'Submit'}\n          </Button>\n        </Form.Item>\n      </Form>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  state,\n});\n\nconst mapDispatchToProps = dispatch => ({});\n\nconst WrappedFormCreator = Form.create({})(FormCreator);\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(WrappedFormCreator);\n","import {loadOpenUrl} from './loader.api.helper';\nimport {BASE_URL} from '../../constants/credentials.constant';\n\nconst FILE = 'utils/file/';\n\nexport const removeFileFromServer = (identifier: number, uploadId: number) =>\n  loadOpenUrl(FILE, {\n    method: 'delete',\n    data: {\n      upload_id: uploadId,\n      identifier,\n    },\n  });\nexport const getFileHandlerURL = () => `${BASE_URL}/${FILE}`;\n","import {FORM_ELEMENT_TYPES, CAPTCHA} from '../../constants/formFields.constant';\nimport {get} from '../../helpers/function.helper';\n\nexport const verificationDocumentTemplate =\n  // eslint-disable-next-line no-unused-vars\n  (state: any, initialValues: any, extraValues: any, form: any) => [\n    {\n      label: 'Documents',\n      name: 'documents',\n      initialValue: get(initialValues.values, 'documents'),\n\n      type: FORM_ELEMENT_TYPES.FILE_DRAG_DROP,\n      rules: [\n        {\n          required: true,\n        },\n      ],\n      kwargs: {\n        multiple: true,\n        help: 'Upload picture of your Admit card and Student ID Card',\n        desc: 'These documents will be manually verified by ' +\n          'our student coordinators through your respective departments.',\n        listType: 'picture',\n        accept: 'image/jpeg'\n      },\n    },\n    {\n      ...CAPTCHA,\n    },\n  ];\n","import React, {FC} from 'react';\nimport {Typography} from 'antd';\nimport XLink from '../xLink';\n\nimport FormCreator from '../formCreator';\nimport {verificationDocumentTemplate} from '../../forms/signUp/verification.templateForm';\nimport {ISignUpData} from '../../types/signUp.type';\nimport {PRIVACY_POLICY, TERMS_AND_CONDITION} from '../../constants/externalLinks.constant';\n\ninterface IProps {\n  action: any;\n  next: any;\n  data: ISignUpData;\n}\n\nconst {Title} = Typography;\n\nconst VerificationDocumentSignUp: FC<IProps> = ({action, data, next}: IProps) => {\n  const form = (\n    // @ts-ignore\n    <FormCreator\n      formTemplate={verificationDocumentTemplate}\n      title='Verification Document'\n      formLayout={{}}\n      submitButtonText='Create My Account'\n      buttonType='block'\n      onSubmit={(objForm: any) => {\n        action({\n          ...data,\n          basic: {\n            ...data.basic,\n            ...objForm.getFieldsValue(),\n          },\n        });\n        next();\n      }}\n    />\n  );\n\n  return (\n    <div>\n      <Title>Verification Documents</Title>\n      By clicking on &quot;Create my account&quot; you agree to our\n      <XLink href={TERMS_AND_CONDITION} newLine={false}> terms and conditions </XLink>\n      and\n      <XLink href={PRIVACY_POLICY} newLine={false}> privacy policy. </XLink>\n      <br />\n      We are tracking your activity for any suspicious or illegal activity.\n      <br />\n      <br />\n      {form}\n    </div>\n  );\n};\n\nexport default VerificationDocumentSignUp;\n"],"sourceRoot":""}